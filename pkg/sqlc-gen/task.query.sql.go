// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: task.query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const create = `-- name: Create :one
INSERT INTO tasks (url)
VALUES ($1)
RETURNING id, created_at, updated_at, url, headers, length, status
`

func (q *Queries) Create(ctx context.Context, url string) (*Task, error) {
	row := q.queryRow(ctx, q.createStmt, create, url)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		pq.Array(&i.Headers),
		&i.Length,
		&i.Status,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, created_at, updated_at, url, headers, length, status
FROM tasks WHERE id = $1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*Task, error) {
	row := q.queryRow(ctx, q.getByIdStmt, getById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		pq.Array(&i.Headers),
		&i.Length,
		&i.Status,
	)
	return &i, err
}

const update = `-- name: Update :exec
UPDATE tasks SET headers = $2, status = $3, length = $4 WHERE id = $1
`

type UpdateParams struct {
	ID      uuid.UUID     `json:"id"`
	Headers []string      `json:"headers"`
	Status  TaskStatus    `json:"status"`
	Length  sql.NullInt32 `json:"length"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.exec(ctx, q.updateStmt, update,
		arg.ID,
		pq.Array(arg.Headers),
		arg.Status,
		arg.Length,
	)
	return err
}
